{"version":3,"file":"main.9e43d706474f2f39d04f.hot-update.js","sources":["webpack:///./AppWithRedux.tsx","webpack:///./Todolist.tsx","webpack:///./stories/AppWithRedux.stories.tsx"],"sourcesContent":["import React, {useCallback} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {addTodolistAC} from \"../../todolist_dymich/src/state/todolists-reducer\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from \"./state/store\";\n\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\nexport type TodolistType = {\n    id: string,\n    title: string,\n    filter: FilterValuesType\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists)\n    //const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\n\n\n    const addTodolist = useCallback((title: string) => {\n        const action = addTodolistAC(title);\n        dispatch(action);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodolist} />\n            {\n                todolists.map((tl) => {\n                    return (\n                        <Todolist key={tl.id}\n                                  todoListId={tl.id}\n                                  title={tl.title}\n                                  filter={tl.filter}\n                    />\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValuesType} from \"./AppWithRedux\";\r\nimport s from \"./Todolist.module.css\"\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleStatusAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, TaskType[]>(state => state.tasks[props.todoListId])\r\n\r\n    const onAllClickHandler = useCallback((value: FilterValuesType, todoLisId: string) => {\r\n        const action = changeTodolistFilterAC(value, todoLisId)\r\n        dispatch(action)\r\n    }, [props.filter, props.todoListId]);\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        const action = removeTodolistAC(props.todoListId)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        const action = changeTodolistTitleAC(newTitle, props.todoListId);\r\n        dispatch(action)\r\n    }, [dispatch, props.todoListId]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        const action = addTaskAC(title, props.todoListId);\r\n        dispatch(action)\r\n    }, [props.todoListId]);\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string, taskID: string) => {\r\n        const action = changeTaskTitleStatusAC(taskID, props.todoListId, newTitle);\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const checkBoxHandler = useCallback((id: string, todoLisId: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        const action = changeTaskStatusAC(id, todoLisId, e.currentTarget.checked)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const onRemoveHandler = useCallback((id: string, todoLisId: string) => {\r\n        const action = removeTaskAC(id, todoLisId)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n    }\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan taskID={props.todoListId} title={props.title} onChange={changeTodoListTitle}/>\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        key={t.id}\r\n                        task={t}\r\n                        todoListId={props.todoListId}\r\n                        checkBoxHandler={checkBoxHandler}\r\n                        onChangeTitleHandler={onChangeTitleHandler}\r\n                        onRemoveHandler={onRemoveHandler}\r\n                    />)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? s.activeFilter : \"\"}\r\n                        onClick={() => {\r\n                            onAllClickHandler(\"all\", props.todoListId)\r\n                        }}>All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? s.activeFilter : \"\"}\r\n                        onClick={() => {\r\n                            onAllClickHandler(\"active\", props.todoListId)\r\n                        }}>Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? s.activeFilter : \"\"}\r\n                        onClick={() => {\r\n                            onAllClickHandler(\"completed\", props.todoListId)\r\n                        }}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    checkBoxHandler: (id: string, todoListId: string, e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeTitleHandler: (newTitle: string, taskID: string) => void\r\n    onRemoveHandler: (id: string, todoListId: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    return (\r\n        <li key={props.task.id} className={props.task.isDone ? s.isDone : \"\"}>\r\n            <input type=\"checkbox\"\r\n                   checked={props.task.isDone}\r\n                   onChange={(e) => props.checkBoxHandler(props.task.id, props.todoListId, e)}/>\r\n            <EditableSpan title={props.task.title}\r\n                          onChange={props.onChangeTitleHandler}\r\n                          taskID={props.task.id}/>\r\n            <button onClick={() =>\r\n                props.onRemoveHandler(props.task.id, props.todoListId)}>X\r\n            </button>\r\n        </li>\r\n    )\r\n});\r\n\r\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport {action} from \\\"@storybook/addon-actions\\\";\\nimport AppWithRedux from \\\"../AppWithRedux\\\";\\nimport {Provider} from \\\"react-redux\\\";\\n\\nexport default {\\n    title: \\\"AppWithRedux Component\\\",\\n    component: AppWithRedux,\\n}\\n\\n\\nexport const AppWithReduxBaseExample = () => {\\n    return <Provider> <AppWithRedux/>\\n    </Provider>\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"AppWithReduxBaseExample\":{\"startLoc\":{\"col\":39,\"line\":12},\"endLoc\":{\"col\":1,\"line\":15},\"startBody\":{\"col\":39,\"line\":12},\"endBody\":{\"col\":1,\"line\":15}}};\n    \nimport React from \"react\";\nimport {action} from \"@storybook/addon-actions\";\nimport AppWithRedux from \"../AppWithRedux\";\nimport {Provider} from \"react-redux\";\n\nexport default {\n    title: \"AppWithRedux Component\",\n    component: AppWithRedux,\n}\n\n\nexport const AppWithReduxBaseExample = () => {\n    return <Provider> <AppWithRedux/>\n    </Provider>\n};\n\n\nAppWithReduxBaseExample.parameters = { storySource: { source: \"() => {\\n    return <Provider> <AppWithRedux/>\\n    </Provider>\\n}\" }, ...AppWithReduxBaseExample.parameters };"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAaA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AAXA;AAeA;AACA;AA7BA;AA8BA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAcA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AACA;AAHA;AAAA;AAXA;AAlBA;AAqCA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAGA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AAAA;AAAA;AAPA;AAYA;;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;AAEA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAEA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}