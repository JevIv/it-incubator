webpackHotUpdate("main",{

/***/ "./stories sync recursive ^\\.(?:(?:^|[\\\\/]|(?:(?:(?!(?:^|[\\\\/])\\.).)*?)[\\\\/])(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.(js|jsx|ts|tsx))$":
/*!*************************************************************************************************************************!*\
  !*** ./stories sync ^\.(?:(?:^|[\\/]|(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/])(?!\.)(?=.)[^\\/]*?\.stories\.(js|jsx|ts|tsx))$ ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./AddItemForm.stories.tsx": "./stories/AddItemForm.stories.tsx",
	"./Button.stories.jsx": "./stories/Button.stories.jsx",
	"./EditableSpan.stories.tsx": "./stories/EditableSpan.stories.tsx",
	"./Header.stories.jsx": "./stories/Header.stories.jsx",
	"./Page.stories.jsx": "./stories/Page.stories.jsx",
	"./Task.stories.tsx": "./stories/Task.stories.tsx"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./stories sync recursive ^\\.(?:(?:^|[\\\\/]|(?:(?:(?!(?:^|[\\\\/])\\.).)*?)[\\\\/])(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.(js|jsx|ts|tsx))$";

/***/ }),

/***/ "./stories/EditableSpan.stories.tsx":
/*!******************************************!*\
  !*** ./stories/EditableSpan.stories.tsx ***!
  \******************************************/
/*! exports provided: EditableSpan */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditableSpan", function() { return EditableSpan; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "../node_modules/react/jsx-runtime.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* eslint-disable */
// @ts-nocheck
// @ts-ignore
var __STORY__ = "import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    taskID: string\r\n    title: string\r\n    onChange: (newValue: string, taskID: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) =>  {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title, props.taskID);\r\n    }\r\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n        setTitle(e.currentTarget.value);\r\n\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={onchangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n});\r\n\r\n"; // @ts-ignore

var __LOCATIONS_MAP__ = {
  "EditableSpan": {
    "startLoc": {
      "col": 28,
      "line": 9
    },
    "endLoc": {
      "col": 2,
      "line": 28
    },
    "startBody": {
      "col": 28,
      "line": 9
    },
    "endBody": {
      "col": 2,
      "line": 28
    }
  }
};


var EditableSpan = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.memo(function (props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false),
      _useState2 = _slicedToArray(_useState, 2),
      editMode = _useState2[0],
      setEditMode = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(""),
      _useState4 = _slicedToArray(_useState3, 2),
      title = _useState4[0],
      setTitle = _useState4[1];

  var activateEditMode = function () {
    setEditMode(true);
    setTitle(props.title);
  };

  var activateViewMode = function () {
    setEditMode(false);
    props.onChange(title, props.taskID);
  };

  var onchangeTitleHandler = function (e) {
    return setTitle(e.currentTarget.value);
  };

  return editMode ? /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__["jsx"])("input", {
    value: title,
    onChange: onchangeTitleHandler,
    onBlur: activateViewMode,
    autoFocus: true
  }) : /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__["jsx"])("span", {
    onDoubleClick: activateEditMode,
    children: props.title
  });
});
EditableSpan.parameters = Object.assign({
  storySource: {
    source: "React.memo((props: EditableSpanPropsType) =>  {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title, props.taskID);\r\n    }\r\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n        setTitle(e.currentTarget.value);\r\n\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={onchangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})"
  }
}, EditableSpan.parameters);

/***/ })

})
//# sourceMappingURL=main.d3c360672e4c7ed54a03.hot-update.js.map