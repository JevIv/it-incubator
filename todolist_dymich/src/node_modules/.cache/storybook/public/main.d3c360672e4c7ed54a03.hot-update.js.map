{"version":3,"file":"main.d3c360672e4c7ed54a03.hot-update.js","sources":["webpack:///\\.)(?3be6","webpack:///./stories/EditableSpan.stories.tsx"],"sourcesContent":["var map = {\n\t\"./AddItemForm.stories.tsx\": \"./stories/AddItemForm.stories.tsx\",\n\t\"./Button.stories.jsx\": \"./stories/Button.stories.jsx\",\n\t\"./EditableSpan.stories.tsx\": \"./stories/EditableSpan.stories.tsx\",\n\t\"./Header.stories.jsx\": \"./stories/Header.stories.jsx\",\n\t\"./Page.stories.jsx\": \"./stories/Page.stories.jsx\",\n\t\"./Task.stories.tsx\": \"./stories/Task.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./stories sync recursive ^\\\\.(?:(?:^|[\\\\\\\\/]|(?:(?:(?!(?:^|[\\\\\\\\/])\\\\.).)*?)[\\\\\\\\/])(?!\\\\.)(?=.)[^\\\\\\\\/]*?\\\\.stories\\\\.(js|jsx|ts|tsx))$\";","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {ChangeEvent, useState} from \\\"react\\\";\\r\\n\\r\\ntype EditableSpanPropsType = {\\r\\n    taskID: string\\r\\n    title: string\\r\\n    onChange: (newValue: string, taskID: string) => void\\r\\n}\\r\\n\\r\\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) =>  {\\r\\n    let [editMode, setEditMode] = useState(false);\\r\\n    let [title, setTitle] = useState(\\\"\\\");\\r\\n\\r\\n    const activateEditMode = () => {\\r\\n        setEditMode(true);\\r\\n        setTitle(props.title);\\r\\n    }\\r\\n    const activateViewMode = () => {\\r\\n        setEditMode(false);\\r\\n        props.onChange(title, props.taskID);\\r\\n    }\\r\\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) =>\\r\\n        setTitle(e.currentTarget.value);\\r\\n\\r\\n\\r\\n    return editMode\\r\\n        ? <input value={title} onChange={onchangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/>\\r\\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\\r\\n});\\r\\n\\r\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"EditableSpan\":{\"startLoc\":{\"col\":28,\"line\":9},\"endLoc\":{\"col\":2,\"line\":28},\"startBody\":{\"col\":28,\"line\":9},\"endBody\":{\"col\":2,\"line\":28}}};\n    \nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    taskID: string\r\n    title: string\r\n    onChange: (newValue: string, taskID: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) =>  {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title, props.taskID);\r\n    }\r\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n        setTitle(e.currentTarget.value);\r\n\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={onchangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n});\r\n\r\n\n\n\nEditableSpan.parameters = { storySource: { source: \"React.memo((props: EditableSpanPropsType) =>  {\\r\\n    let [editMode, setEditMode] = useState(false);\\r\\n    let [title, setTitle] = useState(\\\"\\\");\\r\\n\\r\\n    const activateEditMode = () => {\\r\\n        setEditMode(true);\\r\\n        setTitle(props.title);\\r\\n    }\\r\\n    const activateViewMode = () => {\\r\\n        setEditMode(false);\\r\\n        props.onChange(title, props.taskID);\\r\\n    }\\r\\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) =>\\r\\n        setTitle(e.currentTarget.value);\\r\\n\\r\\n\\r\\n    return editMode\\r\\n        ? <input value={title} onChange={onchangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/>\\r\\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\\r\\n})\" }, ...EditableSpan.parameters };"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}