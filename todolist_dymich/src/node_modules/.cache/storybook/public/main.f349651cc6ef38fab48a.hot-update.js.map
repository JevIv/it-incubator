{"version":3,"file":"main.f349651cc6ef38fab48a.hot-update.js","sources":["webpack:///./AppWithRedux.tsx","webpack:///./Todolist.tsx","webpack:///./state/store.ts","webpack:///./state/tasks-reducer.ts","webpack:///./state/todolists-reducer.ts","webpack:///./stories/AppWithRedux.stories.tsx"],"sourcesContent":["import React, {useCallback} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {addTodolistAC} from \"../../todolist_dymich/src/state/todolists-reducer\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from \"./state/store\";\n\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\nexport type TodolistType = {\n    id: string,\n    title: string,\n    filter: FilterValuesType\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists)\n    //const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\n\n\n    const addTodolist = useCallback((title: string) => {\n        const action = addTodolistAC(title);\n        dispatch(action);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodolist} />\n            {\n                todolists.map((tl) => {\n                    return (\n                        <Todolist key={tl.id}\n                                  todoListId={tl.id}\n                                  title={tl.title}\n                                  filter={tl.filter}\n                    />\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValuesType} from \"./AppWithRedux\";\r\nimport s from \"./Todolist.module.css\"\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleStatusAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, TaskType[]>(state => state.tasks[props.todoListId])\r\n\r\n    const onAllClickHandler = useCallback((value: FilterValuesType, todoLisId: string) => {\r\n        const action = changeTodolistFilterAC(value, todoLisId)\r\n        dispatch(action)\r\n    }, [props.filter, props.todoListId]);\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        const action = removeTodolistAC(props.todoListId)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        const action = changeTodolistTitleAC(newTitle, props.todoListId);\r\n        dispatch(action)\r\n    }, [dispatch, props.todoListId]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        const action = addTaskAC(title, props.todoListId);\r\n        dispatch(action)\r\n    }, [props.todoListId]);\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string, taskID: string) => {\r\n        const action = changeTaskTitleStatusAC(taskID, props.todoListId, newTitle);\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const checkBoxHandler = useCallback((id: string, todoLisId: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        const action = changeTaskStatusAC(id, todoLisId, e.currentTarget.checked)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const onRemoveHandler = useCallback((id: string, todoLisId: string) => {\r\n        const action = removeTaskAC(id, todoLisId)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n    }\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan taskID={props.todoListId} title={props.title} onChange={changeTodoListTitle}/>\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        key={t.id}\r\n                        task={t}\r\n                        todoListId={props.todoListId}\r\n                        checkBoxHandler={checkBoxHandler}\r\n                        onChangeTitleHandler={onChangeTitleHandler}\r\n                        onRemoveHandler={onRemoveHandler}\r\n                    />)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? s.activeFilter : \"\"}\r\n                        onClick={() => {\r\n                            onAllClickHandler(\"all\", props.todoListId)\r\n                        }}>All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? s.activeFilter : \"\"}\r\n                        onClick={() => {\r\n                            onAllClickHandler(\"active\", props.todoListId)\r\n                        }}>Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? s.activeFilter : \"\"}\r\n                        onClick={() => {\r\n                            onAllClickHandler(\"completed\", props.todoListId)\r\n                        }}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    checkBoxHandler: (id: string, todoListId: string, e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeTitleHandler: (newTitle: string, taskID: string) => void\r\n    onRemoveHandler: (id: string, todoListId: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    return (\r\n        <li key={props.task.id} className={props.task.isDone ? s.isDone : \"\"}>\r\n            <input type=\"checkbox\"\r\n                   checked={props.task.isDone}\r\n                   onChange={(e) => props.checkBoxHandler(props.task.id, props.todoListId, e)}/>\r\n            <EditableSpan title={props.task.title}\r\n                          onChange={props.onChangeTitleHandler}\r\n                          taskID={props.task.id}/>\r\n            <button onClick={() =>\r\n                props.onRemoveHandler(props.task.id, props.todoListId)}>X\r\n            </button>\r\n        </li>\r\n    )\r\n});\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\n/*type AppRootState = {\r\n    todolists: Array<TodolistType>\r\n    tasks: TasksStateType\r\n}*/\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import {FilterValuesType, TasksStateType, TodolistType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, toDoListId1, toDoListId2} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\"\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTaskActionType |\r\n    AddTaskActionType |\r\n    ChangeTaskStatusActionType |\r\n    ChangeTaskTitleActionType |\r\n    AddTodolistActionType |\r\n    RemoveTodolistActionType;\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state= initialState,\r\n                                 action:ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            return stateCopy;\r\n\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n        //throw new Error(\"Wrong action type\")\r\n\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string,\r\n                             todolistId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", todolistId, taskId}\r\n}\r\nexport const addTaskAC = (title: string,\r\n                          todolistId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   todolistId: string,\r\n                                   isDone: boolean ): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId, todolistId, isDone}\r\n}\r\nexport const changeTaskTitleStatusAC = (taskId: string,\r\n                                        todolistId: string,\r\n                                        title: string ): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", taskId, todolistId, title}\r\n}","import {FilterValuesType, TodolistType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTodolistActionType |\r\n    AddTodolistActionType | ChangeTodolistActionType |\r\n    ChangeTodolistFilterActionType\r\n\r\nexport let toDoListId1 = v1();\r\nexport let toDoListId2 = v1();\r\n\r\nlet initialState: Array<TodolistType> = [];\r\n\r\nexport const todolistsReducer = (state= initialState,\r\n                                 action:ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return  [...state, {\r\n                id: action.todolistId,\r\n                title:action.title,\r\n                filter: \"all\"\r\n            }]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n            //throw new Error(\"Wrong action type\")\r\n\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (title: string, id: string): ChangeTodolistActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, id:id}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id:id}\r\n}","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport {action} from \\\"@storybook/addon-actions\\\";\\nimport AppWithRedux from \\\"../AppWithRedux\\\";\\nimport {Provider} from \\\"react-redux\\\";\\nimport {store} from \\\"../state/store\\\";\\n\\nexport default {\\n    title: \\\"AppWithRedux Component\\\",\\n    component: AppWithRedux,\\n}\\n\\n\\nexport const AppWithReduxBaseExample = () => {\\n    return <Provider store={store}> <AppWithRedux/>\\n    </Provider>\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"AppWithReduxBaseExample\":{\"startLoc\":{\"col\":39,\"line\":13},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":39,\"line\":13},\"endBody\":{\"col\":1,\"line\":16}}};\n    \nimport React from \"react\";\nimport {action} from \"@storybook/addon-actions\";\nimport AppWithRedux from \"../AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"../state/store\";\n\nexport default {\n    title: \"AppWithRedux Component\",\n    component: AppWithRedux,\n}\n\n\nexport const AppWithReduxBaseExample = () => {\n    return <Provider store={store}> <AppWithRedux/>\n    </Provider>\n};\n\n\nAppWithReduxBaseExample.parameters = { storySource: { source: \"() => {\\n    return <Provider store={store}> <AppWithRedux/>\\n    </Provider>\\n}\" }, ...AppWithReduxBaseExample.parameters };"],"mappings":"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","sourceRoot":""}